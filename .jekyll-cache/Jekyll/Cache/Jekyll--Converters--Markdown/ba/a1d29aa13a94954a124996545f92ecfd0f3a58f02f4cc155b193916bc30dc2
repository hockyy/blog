I"×L<p>Having a random header on reload is a neat feature. I managed to get it to work. <em>Try itâ€¦ hit reload!</em>. I have included my initial attempt which didnâ€™t work but parts of it made it into the <a href="#solution">solution</a>.</p>

<h2 id="the-initial-idea">The initial idea</h2>

<h3 id="loop-through-header-images-and-construct-a-list">Loop through header images and construct a list</h3>

<p>I have placed all the header images that I would like to randomize in <code class="language-plaintext highlighter-rouge">/assets/images/headers/</code>. So I want to loop over all <code class="language-plaintext highlighter-rouge">site.static_files</code> and add only the images within that specific folder to my list.</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>&lt;!-- init the list --&gt;
<span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">headers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">%}</span>

&lt;!-- loop and add --&gt;
<span class="p">{%</span><span class="w"> </span><span class="nt">for</span><span class="w"> </span><span class="nv">image</span><span class="w"> </span><span class="nt">in</span><span class="w"> </span><span class="nv">site.static_files</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">image</span><span class="p">.</span><span class="nv">path</span><span class="w"> </span><span class="ow">contains</span><span class="w"> </span><span class="s1">'/assets/images/headers/'</span><span class="w"> </span><span class="p">%}</span>
    &lt;!-- add image --&gt;
    <span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">headers</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">headers</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">push</span><span class="p">:</span><span class="w"> </span><span class="nv">image</span><span class="p">.</span><span class="nv">path</span><span class="w"> </span><span class="p">%}</span>
  <span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">endfor</span><span class="w"> </span><span class="p">%}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We can now have a look at what is stored in the <code class="language-plaintext highlighter-rouge">headers</code> array with:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="p">{{</span><span class="w"> </span><span class="nv">headers</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">inspect</span><span class="w"> </span><span class="p">}}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>which outputs:</p>

<p>["/assets/images/headers/CIG_Group_Photo_2.jpg", "/assets/images/headers/c72dcb0f-8d7a-4956-b49e-5b8461c777a2.jpg", "/assets/images/headers/cig_llnl_sw4_ws.jpg", "/assets/images/headers/e0642ed4-7bb9-41e3-ae9e-52a8d75ea044.jpg", "/assets/images/headers/img_0144.jpg", "/assets/images/headers/img_0319.jpg", "/assets/images/headers/img_0376.jpg", "/assets/images/headers/img_0551.jpg", "/assets/images/headers/img_1540.jpg", "/assets/images/headers/img_1912-pano.jpg", "/assets/images/headers/img_1912.jpg", "/assets/images/headers/img_2407.jpg", "/assets/images/headers/img_2423.jpg", "/assets/images/headers/img_2426-animation.gif", "/assets/images/headers/img_2427.jpg", "/assets/images/headers/img_2428.jpg", "/assets/images/headers/img_2553.jpg", "/assets/images/headers/img_2583.jpg", "/assets/images/headers/img_3022.jpg", "/assets/images/headers/img_3139.jpg", "/assets/images/headers/img_3187.jpg", "/assets/images/headers/img_3217.jpg", "/assets/images/headers/img_3619.jpg", "/assets/images/headers/img_3672.jpg", "/assets/images/headers/img_4365.jpg", "/assets/images/headers/img_4637.jpg", "/assets/images/headers/img_4829.jpg", "/assets/images/headers/img_5227.jpg", "/assets/images/headers/img_5275.jpg", "/assets/images/headers/img_5296.jpg", "/assets/images/headers/img_5297.jpg", "/assets/images/headers/img_5306.jpg", "/assets/images/headers/img_5325.jpg", "/assets/images/headers/img_5875.jpg", "/assets/images/headers/img_5896.jpg", "/assets/images/headers/img_5903.jpg", "/assets/images/headers/img_6016.jpg", "/assets/images/headers/phd_overview.png", "/assets/images/headers/wadi_rum_pan.jpg"]</p>

<h3 id="pick-a-random-header">Pick a random header</h3>

<p>Using the <code class="language-plaintext highlighter-rouge">sample</code> filter we get a random item from the <code class="language-plaintext highlighter-rouge">headers</code> array.</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">random-header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">headers</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">sample</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{{</span><span class="w"> </span><span class="nv">random-header</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">inspect</span><span class="w"> </span><span class="p">}}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>"/assets/images/headers/img_1912.jpg"</p>

<p>The problem is that because Jekyll is a static site generator, this happens when the static page is <em>built</em> and not on reload. So we need to encapsulate this in a JavaScript that is executed every time a page is <em>served</em>.</p>

<h2 id="the-solution"><a id="solution"></a>The solution</h2>

<p>I found this very helpfull <a href="https://thornelabs.net/2014/01/19/display-random-jekyll-posts-during-each-page-load-or-refresh-using-javascript.html">post</a> by <em>James W Thorne</em> that mixes Liquid code and JavaScript code. This may not be the most elegant solution but id works.</p>

<h3 id="defaulthtml-layout">default.html layout</h3>

<p>I added the following JavaScript/Liquid mix to the <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code> section of the <code class="language-plaintext highlighter-rouge">default.html</code> layout:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
</pre></td><td class="rouge-code"><pre><span class="c">&lt;!-- Load jQuery --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/assets/js/vendor/jquery/jquery-3.3.1.min.js"</span> <span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;&lt;/script&gt;</span>

{% if page.header.image == 'random' or page.header.overlay_image == 'random' %}
  <span class="c">&lt;!-- Make a list of header images --&gt;</span>
  <span class="c">&lt;!-- init the list --&gt;</span>
  {% assign header_images = "" | split: ',' %}

  <span class="c">&lt;!-- loop and add --&gt;</span>
  {% for image in site.static_files %}
    {% if image.path contains '/assets/images/headers/' %}
      <span class="c">&lt;!-- add image --&gt;</span>
      {% assign header_images = header_images | push: image.path %}
    {% endif %}
  {% endfor %}

  <span class="c">&lt;!--
    Javascript and Liquid code to gather a list of all header images
    in /assets/images/headers/
  --&gt;</span>
  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>
    <span class="c1">// get images from ``header_images`` array to js var</span>
    <span class="kd">var</span> <span class="nx">header_images</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span><span class="o">%</span> <span class="k">for</span> <span class="nx">image</span> <span class="k">in</span> <span class="nx">header_images</span> <span class="o">%</span><span class="p">}</span>
        <span class="dl">"</span><span class="s2">{{ site.baseurl }}{{ image }}</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">{</span><span class="o">%</span> <span class="nx">endfor</span> <span class="o">%</span><span class="p">}</span>
    <span class="p">];</span>

    <span class="kd">var</span> <span class="nx">randomIndex</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">header_images</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>

    <span class="c1">// and the winning ``header_image`` is...</span>
    <span class="kd">var</span> <span class="nx">header_image</span> <span class="o">=</span> <span class="nx">header_images</span><span class="p">[</span><span class="nx">randomIndex</span><span class="p">]</span>

    <span class="c1">// image without overlay</span>
    <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">page</span><span class="p">.</span><span class="nx">header</span><span class="p">.</span><span class="nx">image</span> <span class="o">==</span> <span class="dl">'</span><span class="s1">random</span><span class="dl">'</span> <span class="o">%</span><span class="p">}</span>
      <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">.page__hero-image</span><span class="dl">"</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">src</span><span class="dl">'</span><span class="p">,</span> <span class="nx">header_image</span><span class="p">);</span>
      <span class="p">});</span>

    <span class="c1">// image with overlay</span>
    <span class="p">{</span><span class="o">%</span> <span class="nx">elsif</span> <span class="nx">page</span><span class="p">.</span><span class="nx">header</span><span class="p">.</span><span class="nx">overlay_image</span> <span class="o">==</span> <span class="dl">'</span><span class="s1">random</span><span class="dl">'</span> <span class="o">%</span><span class="p">}</span>
      <span class="c1">// make sure overlay filter is handled correctly</span>
      <span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="nx">page</span><span class="p">.</span><span class="nx">header</span><span class="p">.</span><span class="nx">overlay_filter</span> <span class="nx">contains</span> <span class="dl">"</span><span class="s2">rgba</span><span class="dl">"</span> <span class="o">%</span><span class="p">}</span>
        <span class="p">{</span><span class="o">%</span> <span class="nx">capture</span> <span class="nx">overlay_filter</span> <span class="o">%</span><span class="p">}{{</span> <span class="nx">page</span><span class="p">.</span><span class="nx">header</span><span class="p">.</span><span class="nx">overlay_filter</span> <span class="p">}}{</span><span class="o">%</span> <span class="nx">endcapture</span> <span class="o">%</span><span class="p">}</span>
      <span class="p">{</span><span class="o">%</span> <span class="nx">elsif</span> <span class="nx">page</span><span class="p">.</span><span class="nx">header</span><span class="p">.</span><span class="nx">overlay_filter</span> <span class="o">%</span><span class="p">}</span>
        <span class="p">{</span><span class="o">%</span> <span class="nx">capture</span> <span class="nx">overlay_filter</span> <span class="o">%</span><span class="p">}</span><span class="nx">rgba</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">{{</span> <span class="nx">page</span><span class="p">.</span><span class="nx">header</span><span class="p">.</span><span class="nx">overlay_filter</span> <span class="p">}}){</span><span class="o">%</span> <span class="nx">endcapture</span> <span class="o">%</span><span class="p">}</span>
      <span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>

      <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">(</span><span class="dl">"</span><span class="s2">.page__hero--overlay</span><span class="dl">"</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">style</span><span class="dl">'</span><span class="p">,</span>
          <span class="dl">'</span><span class="s1">{% if page.header.overlay_color %}
            background-color: {{ page.header.overlay_color | default:
                "transparent" }};
          {% endif %}
          background-image: {% if overlay_filter %}
            linear-gradient({{ overlay_filter }}, {{ overlay_filter }}),
          {% endif %}url(</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">header_image</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">)</span><span class="dl">'</span><span class="p">);</span>
      <span class="p">});</span>

    <span class="p">{</span><span class="o">%</span> <span class="nx">endif</span> <span class="o">%</span><span class="p">}</span>
  <span class="nt">&lt;/script&gt;</span>
{% endif %}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Line 2 loads the <a href="http://jquery.com/">jQuery</a> library that allows setting the <code class="language-plaintext highlighter-rouge">src</code> attribute of the <code class="language-plaintext highlighter-rouge">.page__hero-image</code> class in the case of <code class="language-plaintext highlighter-rouge">image:</code> or the <code class="language-plaintext highlighter-rouge">style</code> attribute of the <code class="language-plaintext highlighter-rouge">.page__hero--overlay</code> class in the case of <code class="language-plaintext highlighter-rouge">overlay_image:</code>.</p>

<p>On build, line 4 makes sure nothing happens unless randomization is needed. If not, lines 5 through 62 will completely vanish from the page source.</p>

<p>Lines 7 through 15 compile a list of images in <code class="language-plaintext highlighter-rouge">/assets/images/headers/</code> and assigns that list to a <code class="language-plaintext highlighter-rouge">header_images</code> array variable. This is outside the JavaScrip code so it is run only when the page is built, not every time it is served.</p>

<p>The contents of the square brackets between lines 23 and 27 <strong>must</strong> be one line. Similarly, Lines 50 through 57 <strong>must</strong> be one line. *Lines here are broken for readability.</p>

<h3 id="yaml-front-matter">YAML front matter</h3>

<p>Every other layout is initially dependent on the <code class="language-plaintext highlighter-rouge">default</code> layout so header <code class="language-plaintext highlighter-rouge">image</code> or <code class="language-plaintext highlighter-rouge">overlay_image</code> can be randomized in all layouts. Simply set <code class="language-plaintext highlighter-rouge">image: random</code> or <code class="language-plaintext highlighter-rouge">overlay_image: random</code> in the front matter and you are set.</p>

<p>Here is an example of a <a href="/_pages/random_header_image/">page with a random header image</a> (unlike this post which has a random header <code class="language-plaintext highlighter-rouge">overlay_image</code>). If you were wondering what the front matter for this post looks like, here it is:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">Randomizing header image</span>
<span class="na">header</span><span class="pi">:</span>
  <span class="na">overlay_image</span><span class="pi">:</span> <span class="s">random</span>
  <span class="na">overlay_filter</span><span class="pi">:</span> <span class="s">rgba(255, 255, 255, 0.3)</span>
  <span class="na">caption</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Image</span><span class="nv"> </span><span class="s">subject</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">Copyright:</span><span class="nv"> </span><span class="s">[**Â©</span><span class="nv"> </span><span class="s">Shahar</span><span class="nv"> </span><span class="s">Shani-Kadmiel**](https://shaharkadmiel.github.io)"</span>
<span class="na">tags</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">Random stuff</span><span class="pi">,</span> <span class="nv">Images</span><span class="pi">,</span> <span class="nv">Jekyll</span><span class="pi">,</span> <span class="nv">Liquid</span><span class="pi">,</span> <span class="nv">JavaScript</span><span class="pi">,</span> <span class="nv">jQuery</span><span class="pi">,</span> <span class="nv">Hacking</span><span class="pi">]</span>
<span class="na">toc</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">toc_label</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Contents"</span>
<span class="na">author_profile</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">published</span><span class="pi">:</span> <span class="no">true</span>
<span class="nn">---</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET